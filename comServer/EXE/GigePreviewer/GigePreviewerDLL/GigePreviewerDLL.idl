// GigePreviewerDLL.idl: источник языка IDL для GigePreviewerDLL
//

// Этот файл будет обработан средством MIDL для
// создание библиотеки типов ($handlersafeidlname$.tlb) и кода маршалирования.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(6e9426a3-85f5-466d-8b3a-d86a6d5fb87c),
	pointer_default(unique)
]
interface IPreviewer : IUnknown
{
	HRESULT useLibrary([in, size_is(20)] CHAR* libFile);

	HRESULT getInterfacesSize([out] BYTE* oInterfacesSize);
	HRESULT getInterfaceName([out, size_is(50)] CHAR* oName, [in] BYTE iIndex);
	HRESULT setInterface([in, size_is(50)] CHAR* iInterface);

	HRESULT getDevicesSize([out] BYTE* oDevicesSize);
	HRESULT getDeviceName([out, size_is(50)] CHAR* oName, [in] BYTE iIndex);
	HRESULT setDevice([in, size_is(50)] CHAR* iDevice);

	HRESULT getStreamsSize([out] BYTE* oStreamsSize);
	HRESULT getStreamName([out, size_is(50)] CHAR* oName, [in] BYTE iIndex);
	HRESULT setStream([in, size_is(50)] CHAR* iStream);

	HRESULT cameraInit();
	HRESULT useConfig([in, size_is(50)] CHAR* node);
	HRESULT saveConfig([in, size_is(50)] CHAR* node);

	HRESULT getNodesSize([out] BYTE* size);
	HRESULT getNodeName([out, size_is(50)] CHAR* oName, [in] BYTE iIndex);
	HRESULT getNodeVisibility([out] BYTE* oVis, [in] BYTE iIndex);
	HRESULT getNodeAccessMode([out] BYTE* oAm, [in] BYTE iIndex);
	HRESULT getNodeType([out] BYTE* oType, [in] BYTE iIndex);

	HRESULT getIntNode([in, size_is(50)] CHAR* node, [out] LONG* oVal);
	HRESULT setIntNode([in, size_is(50)] CHAR* node, [in] LONG iVal);

	HRESULT getEnumStrNode([in, size_is(50)] CHAR* node, [out, size_is(50)] CHAR* oVal);
	HRESULT getStrNode([in, size_is(50)] CHAR* node, [out, size_is(50)] CHAR* oVal);

	HRESULT startAquisition();
	HRESULT getImage([out, size_is(len)] BYTE* image, [in] LONG len);
};
[
	uuid(91122f49-007b-4c2c-bd1e-9eec38eae568),
	version(1.0),
]
library GigePreviewerDLLLib
{
	importlib("stdole2.tlb");
	[
		uuid(24d9e0a6-e838-47e7-947e-2a7391acdfab)
	]
	coclass Previewer
	{
		[default] interface IPreviewer;
	};
};

import "shobjidl.idl";
